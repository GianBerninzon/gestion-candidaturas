@startuml "PreguntaControllerTest - Pruebas"
title PreguntaControllerTest - Diagrama de Secuencia

participant "Client" as Client
participant "MockMvc" as MockMvc
participant "PreguntaController" as PreguntaController
participant "SecurityContext" as SecurityContext
participant "PreguntaService" as PreguntaService
participant "CandidaturaService" as CandidaturaService #lightgrey
participant "UserService" as UserService #lightgrey
participant "JwtUtil" as JwtUtil #lightgrey

note over Client, JwtUtil: Configuración inicial (setUp)
Client -> SecurityContext: mockAuthentication(user/admin)
activate SecurityContext
SecurityContext --> Client: contexto de seguridad establecido
deactivate SecurityContext

note over Client, JwtUtil: GET /api/preguntas/candidatura/{id}
Client -> MockMvc: perform(GET /api/preguntas/candidatura/1)
activate MockMvc
MockMvc -> SecurityContext: verificar autenticación
activate SecurityContext
SecurityContext --> MockMvc: usuario autenticado
deactivate SecurityContext
MockMvc -> PreguntaController: getPreguntasByCandidatura(1L)
activate PreguntaController
PreguntaController -> PreguntaService: getPreguntasByCandidaturaId(1L)
activate PreguntaService
PreguntaService --> PreguntaController: List<Pregunta>
deactivate PreguntaService
PreguntaController --> MockMvc: ResponseEntity<List<Pregunta>>
deactivate PreguntaController
MockMvc --> Client: HTTP 200 OK + JSON
deactivate MockMvc

note over Client, JwtUtil: POST /api/preguntas
Client -> MockMvc: perform(POST /api/preguntas)
activate MockMvc
MockMvc -> SecurityContext: verificar autenticación
activate SecurityContext
SecurityContext --> MockMvc: usuario autenticado (USER/ADMIN)
deactivate SecurityContext
MockMvc -> PreguntaController: createPregunta(PreguntaDTO)
activate PreguntaController
PreguntaController -> PreguntaService: savePregunta(Pregunta)
activate PreguntaService
PreguntaService --> PreguntaController: Pregunta guardada
deactivate PreguntaService
PreguntaController --> MockMvc: ResponseEntity<Pregunta>
deactivate PreguntaController
MockMvc --> Client: HTTP 200 OK + JSON
deactivate MockMvc

note over Client, JwtUtil: PUT /api/preguntas/{id}
Client -> MockMvc: perform(PUT /api/preguntas/1)
activate MockMvc
MockMvc -> SecurityContext: verificar autenticación
activate SecurityContext
SecurityContext --> MockMvc: usuario autenticado
deactivate SecurityContext
MockMvc -> PreguntaController: updatePregunta(1L, PreguntaDTO)
activate PreguntaController
PreguntaController -> PreguntaService: getPreguntaById(1L)
activate PreguntaService
PreguntaService --> PreguntaController: Optional<Pregunta>
deactivate PreguntaService

alt Usuario es propietario o ADMIN
    PreguntaController -> PreguntaService: savePregunta(Pregunta)
    activate PreguntaService
    PreguntaService --> PreguntaController: Pregunta actualizada
    deactivate PreguntaService
    PreguntaController --> MockMvc: ResponseEntity<Pregunta>
    MockMvc --> Client: HTTP 200 OK + JSON
else Usuario sin permisos
    PreguntaController --> MockMvc: ResponseEntity (error)
    MockMvc --> Client: HTTP 403 Forbidden
end
deactivate PreguntaController
deactivate MockMvc

note over Client, JwtUtil: DELETE /api/preguntas/{id}
Client -> MockMvc: perform(DELETE /api/preguntas/1)
activate MockMvc
MockMvc -> SecurityContext: verificar autenticación
activate SecurityContext
SecurityContext --> MockMvc: usuario autenticado
deactivate SecurityContext
MockMvc -> PreguntaController: deletePregunta(1L)
activate PreguntaController
PreguntaController -> PreguntaService: getPreguntaById(1L)
activate PreguntaService
PreguntaService --> PreguntaController: Optional<Pregunta>
deactivate PreguntaService

alt Usuario es propietario o ADMIN
    PreguntaController -> PreguntaService: deletePregunta(1L)
    activate PreguntaService
    PreguntaService --> PreguntaController: void
    deactivate PreguntaService
    PreguntaController --> MockMvc: ResponseEntity<Void>
    MockMvc --> Client: HTTP 200 OK
else Usuario sin permisos
    PreguntaController --> MockMvc: ResponseEntity (error)
    MockMvc --> Client: HTTP 403 Forbidden
end
deactivate PreguntaController
deactivate MockMvc

@enduml